/***********************************************************************//**
	@file
***************************************************************************/
#include "alsio/compiler/Scope.hpp"

namespace alsio::compiler {
/***********************************************************************//**
	@brief コンストラクタ
***************************************************************************/
Scope::Scope(const std::string& name)
  : name_(name)
{
}
/***********************************************************************//**
	@brief 
***************************************************************************/
std::string Scope::getPath() const {
  if(auto parent = getParent()) {
    return parent->getPath() + "." + name_;
  }
  return name_;
}
/***********************************************************************//**
	@brief 
***************************************************************************/
ScopePtr Scope::getParent() const {
  return parent_.lock();
}
/***********************************************************************//**
	@brief 
***************************************************************************/
void Scope::setParent(const ScopePtr& parent) {
  assert(!getParent());
  parent_ = parent;
}
/***********************************************************************//**
	@brief 
***************************************************************************/
void Scope::appendChild(const ScopePtr& child) {
  assert(!findChild(child->getName()));
  children_.push_back(child);
}
/***********************************************************************//**
	@brief 
***************************************************************************/
ScopePtr Scope::findChild(const std::string& name) const {
  auto found = std::find_if(children_.begin(), children_.end(), 
                            [&name](const ScopePtr& iter) {
                              return iter->getName() == name;
                            });
  return (found != children_.end()) ? *found : nullptr;
}
/***********************************************************************//**
	$Id$
***************************************************************************/
}
